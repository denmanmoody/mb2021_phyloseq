Denman <- c(“Moody”)
Denman<-c("Moody")
Denman
version
library("devtools")
library(phyloseq)
library(microbiome)
#Load data ----
setwd("/Users/denmanmoody/Documents/GitHub/mb2021_phyloseq")
### To pull saved rarified samples
pseq<- readRDS("Denman_Samples_Rare_FINAL.rds")
## View sample data
summarize_phyloseq(pseq)
OTU = pseq@otu_table
Tax = pseq@tax_table
Metadata = pseq@sam_data
Tree = pseq@phy_tree
pseq_fam <- microbiome::aggregate_rare(pseq, level = "Family", detection = 50/100, prevalence = 70/100)
pseq_phy <- microbiome::aggregate_rare(pseq, level = "Phylum", detection = 50/100, prevalence = 70/100)
pseq_gen <- microbiome::aggregate_rare(pseq, level = "Genus", detection = 50/100, prevalence = 70/100)
pseq.fam.rel <- microbiome::transform(pseq_fam, "compositional")
pseq.phy.rel <- microbiome::transform(pseq_phy, "compositional")
pseq.gen.rel <- microbiome::transform(pseq_gen, "compositional")
pseq.core <- core(pseq.fam.rel, detection = .1/100, prevalence = 90/100)
plot_bar(pseq, fill="Phylum")
top5P.names = sort(tapply(taxa_sums(pseq), tax_table(pseq)[, "Phylum"], sum), TRUE)[1:5]
top5P = subset_taxa(pseq, Phylum %in% names(top5P.names))
plot_bar(top5P, x="Factor", fill="Phylum") + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="stack") + labs(y = "Total Abundance")
library(ggplot2)
plot_bar(top5P, x="Factor", fill="Phylum") + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="stack") + labs(y = "Total Abundance") + theme_classic()
plot_bar(top5P, x="Factor", fill="Phylum", facet_grid = ~Phylum) + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="stack") + labs(y = "Total Abundance") + theme_bw() + theme(panel.grid = element_blank()) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
strip.text = element_text(size = 11))
#Sort genera by total abundance and pick the top 9
top9P.names = sort(tapply(taxa_sums(pseq), tax_table(pseq)[, "Genus"], sum), TRUE)[1:9]
#Cut down the physeq data to only the top 9 genera
top9P = subset_taxa(pseq, Genus %in% names(top9P.names))
plot_bar(top9P, x="Factor", fill="Genus", facet_grid = ~Age) + geom_bar(aes(color=Genus, fill=Genus), stat="identity", position="stack") + labs(y = "Total Abundance", x = " ") + theme_bw() + theme(panel.grid = element_blank()) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12), axis.text.y = element_text(size = 12), strip.text = element_text(size = 12))
plot_bar(top9P, x="Factor", fill="Genus", facet_grid = ~Genus) + geom_bar(aes(color=Genus, fill=Genus), stat="identity", position="stack") + labs(y = "Total Abundance", x = " ") + theme_bw() + theme(panel.grid = element_blank()) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12), axis.text.y = element_text(size = 12), strip.text = element_text(size = 11))
#Sort genera by relative abundance and pick the top 9
top9P.names = sort(tapply(taxa_sums(pseq.gen.rel), tax_table(pseq.gen.rel)[, "Genus"], sum), TRUE)[1:9]
#Cut down the physeq data to only the top 9 genera
top9P = subset_taxa(pseq.gen.rel, Genus %in% names(top9P.names))
plot_bar(top9P, x="Factor", fill="Genus", facet_grid = ~Genus) + geom_bar(aes(color=Genus, fill=Genus), stat="identity", position="stack") + labs(y = "Total Abundance", x = " ") + theme_bw() + theme(panel.grid = element_blank()) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12), axis.text.y = element_text(size = 12), strip.text = element_text(size = 11))
plot_bar(top9P, x="Factor", fill="Genus", facet_grid = ~Genus) + geom_bar(aes(color=Genus, fill=Genus), stat="identity", position="stack") + labs(y = "Relative Abundance", x = " ") + theme_bw() + theme(panel.grid = element_blank()) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12), axis.text.y = element_text(size = 12), strip.text = element_text(size = 11))
